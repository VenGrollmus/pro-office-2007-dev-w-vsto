'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorksLT")>  _
Partial Public Class SalesDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertService(instance As Service)
    End Sub
  Partial Private Sub UpdateService(instance As Service)
    End Sub
  Partial Private Sub DeleteService(instance As Service)
    End Sub
  Partial Private Sub InsertTask(instance As Task)
    End Sub
  Partial Private Sub UpdateTask(instance As Task)
    End Sub
  Partial Private Sub DeleteTask(instance As Task)
    End Sub
  Partial Private Sub InsertEmployee(instance As Employee)
    End Sub
  Partial Private Sub UpdateEmployee(instance As Employee)
    End Sub
  Partial Private Sub DeleteEmployee(instance As Employee)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertOpportunity(instance As Opportunity)
    End Sub
  Partial Private Sub UpdateOpportunity(instance As Opportunity)
    End Sub
  Partial Private Sub DeleteOpportunity(instance As Opportunity)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CLI309.MySettings.Default.AdventureWorksLTConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Services() As System.Data.Linq.Table(Of Service)
		Get
			Return Me.GetTable(Of Service)
		End Get
	End Property
	
	Public ReadOnly Property Tasks() As System.Data.Linq.Table(Of Task)
		Get
			Return Me.GetTable(Of Task)
		End Get
	End Property
	
	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
		Get
			Return Me.GetTable(Of Employee)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Opportunities() As System.Data.Linq.Table(Of Opportunity)
		Get
			Return Me.GetTable(Of Opportunity)
		End Get
	End Property
End Class

<Table(Name:="SalesLT.Services")>  _
Partial Public Class Service
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ServiceID As Integer
	
	Private _ServiceName As String
	
	Private _Active As System.Nullable(Of Boolean)
	
	Private _AcctId As String
	
	Private _Opportunities As EntitySet(Of Opportunity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnServiceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnServiceIDChanged()
    End Sub
    Partial Private Sub OnServiceNameChanging(value As String)
    End Sub
    Partial Private Sub OnServiceNameChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    Partial Private Sub OnAcctIdChanging(value As String)
    End Sub
    Partial Private Sub OnAcctIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Opportunities = New EntitySet(Of Opportunity)(AddressOf Me.attach_Opportunities, AddressOf Me.detach_Opportunities)
		OnCreated
	End Sub
	
	<Column(Storage:="_ServiceID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ServiceID() As Integer
		Get
			Return Me._ServiceID
		End Get
		Set
			If ((Me._ServiceID = value)  _
						= false) Then
				Me.OnServiceIDChanging(value)
				Me.SendPropertyChanging
				Me._ServiceID = value
				Me.SendPropertyChanged("ServiceID")
				Me.OnServiceIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ServiceName", DbType:="NVarChar(50)")>  _
	Public Property ServiceName() As String
		Get
			Return Me._ServiceName
		End Get
		Set
			If (String.Equals(Me._ServiceName, value) = false) Then
				Me.OnServiceNameChanging(value)
				Me.SendPropertyChanging
				Me._ServiceName = value
				Me.SendPropertyChanged("ServiceName")
				Me.OnServiceNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Active", DbType:="Bit")>  _
	Public Property Active() As System.Nullable(Of Boolean)
		Get
			Return Me._Active
		End Get
		Set
			If (Me._Active.Equals(value) = false) Then
				Me.OnActiveChanging(value)
				Me.SendPropertyChanging
				Me._Active = value
				Me.SendPropertyChanged("Active")
				Me.OnActiveChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AcctId", DbType:="NVarChar(250)")>  _
	Public Property AcctId() As String
		Get
			Return Me._AcctId
		End Get
		Set
			If (String.Equals(Me._AcctId, value) = false) Then
				Me.OnAcctIdChanging(value)
				Me.SendPropertyChanging
				Me._AcctId = value
				Me.SendPropertyChanged("AcctId")
				Me.OnAcctIdChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Service_Opportunity", Storage:="_Opportunities", OtherKey:="ServiceID")>  _
	Public Property Opportunities() As EntitySet(Of Opportunity)
		Get
			Return Me._Opportunities
		End Get
		Set
			Me._Opportunities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Opportunities(ByVal entity As Opportunity)
		Me.SendPropertyChanging
		entity.Service = Me
	End Sub
	
	Private Sub detach_Opportunities(ByVal entity As Opportunity)
		Me.SendPropertyChanging
		entity.Service = Nothing
	End Sub
End Class

<Table(Name:="SalesLT.Tasks")>  _
Partial Public Class Task
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TaskID As Integer
	
	Private _OpportunityID As Integer
	
	Private _EmployeeID As Integer
	
	Private _TaskName As String
	
	Private _Notes As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _Status As String
	
	Private _PercentComplete As System.Nullable(Of Integer)
	
	Private _Priority As String
	
	Private _Employee As EntityRef(Of Employee)
	
	Private _Opportunity As EntityRef(Of Opportunity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTaskIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTaskIDChanged()
    End Sub
    Partial Private Sub OnOpportunityIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOpportunityIDChanged()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnTaskNameChanging(value As String)
    End Sub
    Partial Private Sub OnTaskNameChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnPercentCompleteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPercentCompleteChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As String)
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		Me._Opportunity = CType(Nothing, EntityRef(Of Opportunity))
		OnCreated
	End Sub
	
	<Column(Storage:="_TaskID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TaskID() As Integer
		Get
			Return Me._TaskID
		End Get
		Set
			If ((Me._TaskID = value)  _
						= false) Then
				Me.OnTaskIDChanging(value)
				Me.SendPropertyChanging
				Me._TaskID = value
				Me.SendPropertyChanged("TaskID")
				Me.OnTaskIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OpportunityID", DbType:="Int NOT NULL")>  _
	Public Property OpportunityID() As Integer
		Get
			Return Me._OpportunityID
		End Get
		Set
			If ((Me._OpportunityID = value)  _
						= false) Then
				If Me._Opportunity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnOpportunityIDChanging(value)
				Me.SendPropertyChanging
				Me._OpportunityID = value
				Me.SendPropertyChanged("OpportunityID")
				Me.OnOpportunityIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EmployeeID", DbType:="Int NOT NULL")>  _
	Public Property EmployeeID() As Integer
		Get
			Return Me._EmployeeID
		End Get
		Set
			If ((Me._EmployeeID = value)  _
						= false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnEmployeeIDChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeID = value
				Me.SendPropertyChanged("EmployeeID")
				Me.OnEmployeeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TaskName", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property TaskName() As String
		Get
			Return Me._TaskName
		End Get
		Set
			If (String.Equals(Me._TaskName, value) = false) Then
				Me.OnTaskNameChanging(value)
				Me.SendPropertyChanging
				Me._TaskName = value
				Me.SendPropertyChanged("TaskName")
				Me.OnTaskNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="NVarChar(100)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PercentComplete", DbType:="Int")>  _
	Public Property PercentComplete() As System.Nullable(Of Integer)
		Get
			Return Me._PercentComplete
		End Get
		Set
			If (Me._PercentComplete.Equals(value) = false) Then
				Me.OnPercentCompleteChanging(value)
				Me.SendPropertyChanging
				Me._PercentComplete = value
				Me.SendPropertyChanged("PercentComplete")
				Me.OnPercentCompleteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Priority", DbType:="NVarChar(50)")>  _
	Public Property Priority() As String
		Get
			Return Me._Priority
		End Get
		Set
			If (String.Equals(Me._Priority, value) = false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Employee_Task", Storage:="_Employee", ThisKey:="EmployeeID", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.Tasks.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tasks.Add(Me)
					Me._EmployeeID = value.EmployeeID
				Else
					Me._EmployeeID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	<Association(Name:="Opportunity_Task", Storage:="_Opportunity", ThisKey:="OpportunityID", IsForeignKey:=true)>  _
	Public Property Opportunity() As Opportunity
		Get
			Return Me._Opportunity.Entity
		End Get
		Set
			Dim previousValue As Opportunity = Me._Opportunity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Opportunity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Opportunity.Entity = Nothing
					previousValue.Tasks.Remove(Me)
				End If
				Me._Opportunity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tasks.Add(Me)
					Me._OpportunityID = value.OpportunityID
				Else
					Me._OpportunityID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Opportunity")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="SalesLT.Employee")>  _
Partial Public Class Employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EmployeeID As Integer
	
	Private _FullName As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Status As System.Nullable(Of Boolean)
	
	Private _Email As String
	
	Private _OfficePhoneNumber As String
	
	Private _MobilePhoneNumber As String
	
	Private _FaxPhoneNumber As String
	
	Private _StreetAddress As String
	
	Private _City As String
	
	Private _State As String
	
	Private _PostalCode As String
	
	Private _Tasks As EntitySet(Of Task)
	
	Private _Opportunities As EntitySet(Of Opportunity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnOfficePhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnOfficePhoneNumberChanged()
    End Sub
    Partial Private Sub OnMobilePhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePhoneNumberChanged()
    End Sub
    Partial Private Sub OnFaxPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnFaxPhoneNumberChanged()
    End Sub
    Partial Private Sub OnStreetAddressChanging(value As String)
    End Sub
    Partial Private Sub OnStreetAddressChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tasks = New EntitySet(Of Task)(AddressOf Me.attach_Tasks, AddressOf Me.detach_Tasks)
		Me._Opportunities = New EntitySet(Of Opportunity)(AddressOf Me.attach_Opportunities, AddressOf Me.detach_Opportunities)
		OnCreated
	End Sub
	
	<Column(Storage:="_EmployeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EmployeeID() As Integer
		Get
			Return Me._EmployeeID
		End Get
		Set
			If ((Me._EmployeeID = value)  _
						= false) Then
				Me.OnEmployeeIDChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeID = value
				Me.SendPropertyChanged("EmployeeID")
				Me.OnEmployeeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FullName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="NVarChar(50)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="NVarChar(50)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="Bit")>  _
	Public Property Status() As System.Nullable(Of Boolean)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Email", DbType:="NVarChar(250)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OfficePhoneNumber", DbType:="NVarChar(25)")>  _
	Public Property OfficePhoneNumber() As String
		Get
			Return Me._OfficePhoneNumber
		End Get
		Set
			If (String.Equals(Me._OfficePhoneNumber, value) = false) Then
				Me.OnOfficePhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._OfficePhoneNumber = value
				Me.SendPropertyChanged("OfficePhoneNumber")
				Me.OnOfficePhoneNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MobilePhoneNumber", DbType:="NVarChar(25)")>  _
	Public Property MobilePhoneNumber() As String
		Get
			Return Me._MobilePhoneNumber
		End Get
		Set
			If (String.Equals(Me._MobilePhoneNumber, value) = false) Then
				Me.OnMobilePhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._MobilePhoneNumber = value
				Me.SendPropertyChanged("MobilePhoneNumber")
				Me.OnMobilePhoneNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FaxPhoneNumber", DbType:="NVarChar(25)")>  _
	Public Property FaxPhoneNumber() As String
		Get
			Return Me._FaxPhoneNumber
		End Get
		Set
			If (String.Equals(Me._FaxPhoneNumber, value) = false) Then
				Me.OnFaxPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._FaxPhoneNumber = value
				Me.SendPropertyChanged("FaxPhoneNumber")
				Me.OnFaxPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StreetAddress", DbType:="NVarChar(250)")>  _
	Public Property StreetAddress() As String
		Get
			Return Me._StreetAddress
		End Get
		Set
			If (String.Equals(Me._StreetAddress, value) = false) Then
				Me.OnStreetAddressChanging(value)
				Me.SendPropertyChanging
				Me._StreetAddress = value
				Me.SendPropertyChanged("StreetAddress")
				Me.OnStreetAddressChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_City", DbType:="NVarChar(150)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_State", DbType:="NChar(2)")>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PostalCode", DbType:="NVarChar(50)")>  _
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, value) = false) Then
				Me.OnPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalCode = value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Employee_Task", Storage:="_Tasks", OtherKey:="EmployeeID")>  _
	Public Property Tasks() As EntitySet(Of Task)
		Get
			Return Me._Tasks
		End Get
		Set
			Me._Tasks.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Employee_Opportunity", Storage:="_Opportunities", OtherKey:="EmployeeID")>  _
	Public Property Opportunities() As EntitySet(Of Opportunity)
		Get
			Return Me._Opportunities
		End Get
		Set
			Me._Opportunities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tasks(ByVal entity As Task)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_Tasks(ByVal entity As Task)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
	
	Private Sub attach_Opportunities(ByVal entity As Opportunity)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_Opportunities(ByVal entity As Opportunity)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
End Class

<Table(Name:="SalesLT.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerID As Integer
	
	Private _NameStyle As Boolean
	
	Private _Title As String
	
	Private _FirstName As String
	
	Private _MiddleName As String
	
	Private _LastName As String
	
	Private _Suffix As String
	
	Private _CompanyName As String
	
	Private _SalesPerson As String
	
	Private _EmailAddress As String
	
	Private _Phone As String
	
	Private _PasswordHash As String
	
	Private _PasswordSalt As String
	
	Private _rowguid As System.Guid
	
	Private _ModifiedDate As Date
	
	Private _Notes As String
	
	Private _AccountingGUID As System.Nullable(Of System.Guid)
	
	Private _Opportunities As EntitySet(Of Opportunity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnNameStyleChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNameStyleChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnMiddleNameChanging(value As String)
    End Sub
    Partial Private Sub OnMiddleNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnSuffixChanging(value As String)
    End Sub
    Partial Private Sub OnSuffixChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnSalesPersonChanging(value As String)
    End Sub
    Partial Private Sub OnSalesPersonChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnPasswordHashChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordHashChanged()
    End Sub
    Partial Private Sub OnPasswordSaltChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordSaltChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnAccountingGUIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnAccountingGUIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Opportunities = New EntitySet(Of Opportunity)(AddressOf Me.attach_Opportunities, AddressOf Me.detach_Opportunities)
		OnCreated
	End Sub
	
	<Column(Storage:="_CustomerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_NameStyle", DbType:="Bit NOT NULL")>  _
	Public Property NameStyle() As Boolean
		Get
			Return Me._NameStyle
		End Get
		Set
			If ((Me._NameStyle = value)  _
						= false) Then
				Me.OnNameStyleChanging(value)
				Me.SendPropertyChanging
				Me._NameStyle = value
				Me.SendPropertyChanged("NameStyle")
				Me.OnNameStyleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="NVarChar(8)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FirstName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MiddleName", DbType:="NVarChar(50)")>  _
	Public Property MiddleName() As String
		Get
			Return Me._MiddleName
		End Get
		Set
			If (String.Equals(Me._MiddleName, value) = false) Then
				Me.OnMiddleNameChanging(value)
				Me.SendPropertyChanging
				Me._MiddleName = value
				Me.SendPropertyChanged("MiddleName")
				Me.OnMiddleNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LastName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Suffix", DbType:="NVarChar(10)")>  _
	Public Property Suffix() As String
		Get
			Return Me._Suffix
		End Get
		Set
			If (String.Equals(Me._Suffix, value) = false) Then
				Me.OnSuffixChanging(value)
				Me.SendPropertyChanging
				Me._Suffix = value
				Me.SendPropertyChanged("Suffix")
				Me.OnSuffixChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CompanyName", DbType:="NVarChar(128)")>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SalesPerson", DbType:="NVarChar(256)")>  _
	Public Property SalesPerson() As String
		Get
			Return Me._SalesPerson
		End Get
		Set
			If (String.Equals(Me._SalesPerson, value) = false) Then
				Me.OnSalesPersonChanging(value)
				Me.SendPropertyChanging
				Me._SalesPerson = value
				Me.SendPropertyChanged("SalesPerson")
				Me.OnSalesPersonChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EmailAddress", DbType:="NVarChar(50)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Phone", DbType:="NVarChar(25)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PasswordHash", DbType:="VarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordHash() As String
		Get
			Return Me._PasswordHash
		End Get
		Set
			If (String.Equals(Me._PasswordHash, value) = false) Then
				Me.OnPasswordHashChanging(value)
				Me.SendPropertyChanging
				Me._PasswordHash = value
				Me.SendPropertyChanged("PasswordHash")
				Me.OnPasswordHashChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PasswordSalt", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordSalt() As String
		Get
			Return Me._PasswordSalt
		End Get
		Set
			If (String.Equals(Me._PasswordSalt, value) = false) Then
				Me.OnPasswordSaltChanging(value)
				Me.SendPropertyChanging
				Me._PasswordSalt = value
				Me.SendPropertyChanged("PasswordSalt")
				Me.OnPasswordSaltChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property rowguid() As System.Guid
		Get
			Return Me._rowguid
		End Get
		Set
			If ((Me._rowguid = value)  _
						= false) Then
				Me.OnrowguidChanging(value)
				Me.SendPropertyChanging
				Me._rowguid = value
				Me.SendPropertyChanged("rowguid")
				Me.OnrowguidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")>  _
	Public Property ModifiedDate() As Date
		Get
			Return Me._ModifiedDate
		End Get
		Set
			If ((Me._ModifiedDate = value)  _
						= false) Then
				Me.OnModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._ModifiedDate = value
				Me.SendPropertyChanged("ModifiedDate")
				Me.OnModifiedDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AccountingGUID", DbType:="UniqueIdentifier")>  _
	Public Property AccountingGUID() As System.Nullable(Of System.Guid)
		Get
			Return Me._AccountingGUID
		End Get
		Set
			If (Me._AccountingGUID.Equals(value) = false) Then
				Me.OnAccountingGUIDChanging(value)
				Me.SendPropertyChanging
				Me._AccountingGUID = value
				Me.SendPropertyChanged("AccountingGUID")
				Me.OnAccountingGUIDChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Customer_Opportunity", Storage:="_Opportunities", OtherKey:="CustomerID")>  _
	Public Property Opportunities() As EntitySet(Of Opportunity)
		Get
			Return Me._Opportunities
		End Get
		Set
			Me._Opportunities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Opportunities(ByVal entity As Opportunity)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_Opportunities(ByVal entity As Opportunity)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Table(Name:="SalesLT.Opportunities")>  _
Partial Public Class Opportunity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OpportunityID As Integer
	
	Private _OpportunityName As String
	
	Private _CustomerID As Integer
	
	Private _EmployeeID As System.Nullable(Of Integer)
	
	Private _ServiceID As System.Nullable(Of Integer)
	
	Private _Notes As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _EstCloseDate As System.Nullable(Of Date)
	
	Private _EstRevenue As System.Nullable(Of Decimal)
	
	Private _EstStartDate As System.Nullable(Of Date)
	
	Private _EstEndDate As System.Nullable(Of Date)
	
	Private _Status As String
	
	Private _Probability As System.Nullable(Of Decimal)
	
	Private _Closed As System.Nullable(Of Boolean)
	
	Private _Category As String
	
	Private _Source As String
	
	Private _AccountingGUID As System.Nullable(Of System.Guid)
	
	Private _ActualCloseDate As System.Nullable(Of Date)
	
	Private _Tasks As EntitySet(Of Task)
	
	Private _Customer As EntityRef(Of Customer)
	
	Private _Employee As EntityRef(Of Employee)
	
	Private _Service As EntityRef(Of Service)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOpportunityIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnOpportunityIDChanged()
    End Sub
    Partial Private Sub OnOpportunityNameChanging(value As String)
    End Sub
    Partial Private Sub OnOpportunityNameChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnServiceIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnServiceIDChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnEstCloseDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEstCloseDateChanged()
    End Sub
    Partial Private Sub OnEstRevenueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnEstRevenueChanged()
    End Sub
    Partial Private Sub OnEstStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEstStartDateChanged()
    End Sub
    Partial Private Sub OnEstEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEstEndDateChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnProbabilityChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnProbabilityChanged()
    End Sub
    Partial Private Sub OnClosedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnClosedChanged()
    End Sub
    Partial Private Sub OnCategoryChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryChanged()
    End Sub
    Partial Private Sub OnSourceChanging(value As String)
    End Sub
    Partial Private Sub OnSourceChanged()
    End Sub
    Partial Private Sub OnAccountingGUIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnAccountingGUIDChanged()
    End Sub
    Partial Private Sub OnActualCloseDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActualCloseDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tasks = New EntitySet(Of Task)(AddressOf Me.attach_Tasks, AddressOf Me.detach_Tasks)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		Me._Service = CType(Nothing, EntityRef(Of Service))
		OnCreated
	End Sub
	
	<Column(Storage:="_OpportunityID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property OpportunityID() As Integer
		Get
			Return Me._OpportunityID
		End Get
		Set
			If ((Me._OpportunityID = value)  _
						= false) Then
				Me.OnOpportunityIDChanging(value)
				Me.SendPropertyChanging
				Me._OpportunityID = value
				Me.SendPropertyChanged("OpportunityID")
				Me.OnOpportunityIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OpportunityName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OpportunityName() As String
		Get
			Return Me._OpportunityName
		End Get
		Set
			If (String.Equals(Me._OpportunityName, value) = false) Then
				Me.OnOpportunityNameChanging(value)
				Me.SendPropertyChanging
				Me._OpportunityName = value
				Me.SendPropertyChanged("OpportunityName")
				Me.OnOpportunityNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CustomerID", DbType:="Int NOT NULL")>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EmployeeID", DbType:="Int")>  _
	Public Property EmployeeID() As System.Nullable(Of Integer)
		Get
			Return Me._EmployeeID
		End Get
		Set
			If (Me._EmployeeID.Equals(value) = false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnEmployeeIDChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeID = value
				Me.SendPropertyChanged("EmployeeID")
				Me.OnEmployeeIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ServiceID", DbType:="Int")>  _
	Public Property ServiceID() As System.Nullable(Of Integer)
		Get
			Return Me._ServiceID
		End Get
		Set
			If (Me._ServiceID.Equals(value) = false) Then
				If Me._Service.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnServiceIDChanging(value)
				Me.SendPropertyChanging
				Me._ServiceID = value
				Me.SendPropertyChanged("ServiceID")
				Me.OnServiceIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EstCloseDate", DbType:="DateTime")>  _
	Public Property EstCloseDate() As System.Nullable(Of Date)
		Get
			Return Me._EstCloseDate
		End Get
		Set
			If (Me._EstCloseDate.Equals(value) = false) Then
				Me.OnEstCloseDateChanging(value)
				Me.SendPropertyChanging
				Me._EstCloseDate = value
				Me.SendPropertyChanged("EstCloseDate")
				Me.OnEstCloseDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EstRevenue", DbType:="Money")>  _
	Public Property EstRevenue() As System.Nullable(Of Decimal)
		Get
			Return Me._EstRevenue
		End Get
		Set
			If (Me._EstRevenue.Equals(value) = false) Then
				Me.OnEstRevenueChanging(value)
				Me.SendPropertyChanging
				Me._EstRevenue = value
				Me.SendPropertyChanged("EstRevenue")
				Me.OnEstRevenueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EstStartDate", DbType:="DateTime")>  _
	Public Property EstStartDate() As System.Nullable(Of Date)
		Get
			Return Me._EstStartDate
		End Get
		Set
			If (Me._EstStartDate.Equals(value) = false) Then
				Me.OnEstStartDateChanging(value)
				Me.SendPropertyChanging
				Me._EstStartDate = value
				Me.SendPropertyChanged("EstStartDate")
				Me.OnEstStartDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EstEndDate", DbType:="DateTime")>  _
	Public Property EstEndDate() As System.Nullable(Of Date)
		Get
			Return Me._EstEndDate
		End Get
		Set
			If (Me._EstEndDate.Equals(value) = false) Then
				Me.OnEstEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EstEndDate = value
				Me.SendPropertyChanged("EstEndDate")
				Me.OnEstEndDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Probability", DbType:="Decimal(18,0)")>  _
	Public Property Probability() As System.Nullable(Of Decimal)
		Get
			Return Me._Probability
		End Get
		Set
			If (Me._Probability.Equals(value) = false) Then
				Me.OnProbabilityChanging(value)
				Me.SendPropertyChanging
				Me._Probability = value
				Me.SendPropertyChanged("Probability")
				Me.OnProbabilityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Closed", DbType:="Bit")>  _
	Public Property Closed() As System.Nullable(Of Boolean)
		Get
			Return Me._Closed
		End Get
		Set
			If (Me._Closed.Equals(value) = false) Then
				Me.OnClosedChanging(value)
				Me.SendPropertyChanging
				Me._Closed = value
				Me.SendPropertyChanged("Closed")
				Me.OnClosedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Category", DbType:="NVarChar(50)")>  _
	Public Property Category() As String
		Get
			Return Me._Category
		End Get
		Set
			If (String.Equals(Me._Category, value) = false) Then
				Me.OnCategoryChanging(value)
				Me.SendPropertyChanging
				Me._Category = value
				Me.SendPropertyChanged("Category")
				Me.OnCategoryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Source", DbType:="NVarChar(50)")>  _
	Public Property Source() As String
		Get
			Return Me._Source
		End Get
		Set
			If (String.Equals(Me._Source, value) = false) Then
				Me.OnSourceChanging(value)
				Me.SendPropertyChanging
				Me._Source = value
				Me.SendPropertyChanged("Source")
				Me.OnSourceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AccountingGUID", DbType:="UniqueIdentifier")>  _
	Public Property AccountingGUID() As System.Nullable(Of System.Guid)
		Get
			Return Me._AccountingGUID
		End Get
		Set
			If (Me._AccountingGUID.Equals(value) = false) Then
				Me.OnAccountingGUIDChanging(value)
				Me.SendPropertyChanging
				Me._AccountingGUID = value
				Me.SendPropertyChanged("AccountingGUID")
				Me.OnAccountingGUIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ActualCloseDate", DbType:="DateTime")>  _
	Public Property ActualCloseDate() As System.Nullable(Of Date)
		Get
			Return Me._ActualCloseDate
		End Get
		Set
			If (Me._ActualCloseDate.Equals(value) = false) Then
				Me.OnActualCloseDateChanging(value)
				Me.SendPropertyChanging
				Me._ActualCloseDate = value
				Me.SendPropertyChanged("ActualCloseDate")
				Me.OnActualCloseDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Opportunity_Task", Storage:="_Tasks", OtherKey:="OpportunityID")>  _
	Public Property Tasks() As EntitySet(Of Task)
		Get
			Return Me._Tasks
		End Get
		Set
			Me._Tasks.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Customer_Opportunity", Storage:="_Customer", ThisKey:="CustomerID", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.Opportunities.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Opportunities.Add(Me)
					Me._CustomerID = value.CustomerID
				Else
					Me._CustomerID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	<Association(Name:="Employee_Opportunity", Storage:="_Employee", ThisKey:="EmployeeID", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.Opportunities.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Opportunities.Add(Me)
					Me._EmployeeID = value.EmployeeID
				Else
					Me._EmployeeID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	<Association(Name:="Service_Opportunity", Storage:="_Service", ThisKey:="ServiceID", IsForeignKey:=true)>  _
	Public Property Service() As Service
		Get
			Return Me._Service.Entity
		End Get
		Set
			Dim previousValue As Service = Me._Service.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Service.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Service.Entity = Nothing
					previousValue.Opportunities.Remove(Me)
				End If
				Me._Service.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Opportunities.Add(Me)
					Me._ServiceID = value.ServiceID
				Else
					Me._ServiceID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Service")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tasks(ByVal entity As Task)
		Me.SendPropertyChanging
		entity.Opportunity = Me
	End Sub
	
	Private Sub detach_Tasks(ByVal entity As Task)
		Me.SendPropertyChanging
		entity.Opportunity = Nothing
	End Sub
End Class
